{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMutation, useQueryClient } from 'react-query';\nimport { defaultTodoService } from '../modules/todo/services/todo.service';\nimport { QUERY_KEYS } from '../modules/common/consts/app-keys.const';\nexport const useUpdateTodo = () => {\n  _s();\n  const queryClient = useQueryClient();\n  const updateTodo = async (todoId, data) => {\n    await defaultTodoService.updateTodo(todoId, data);\n    return todoId;\n  };\n  const onSuccess = todoId => {\n    console.log(todoId, 'success');\n    queryClient.invalidateQueries([QUERY_KEYS.TODOS, [QUERY_KEYS.TODOID, todoId]]);\n  };\n  const mutation = useMutation(mutationData => updateTodo(mutationData.todoId, mutationData.data), {\n    onSuccess\n  });\n  return {\n    updateTodoMutation: mutation\n  };\n};\n_s(useUpdateTodo, \"mUUakYvFQSudGRmMzZErOI9nuuc=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQueryClient","defaultTodoService","QUERY_KEYS","useUpdateTodo","_s","queryClient","updateTodo","todoId","data","onSuccess","console","log","invalidateQueries","TODOS","TODOID","mutation","mutationData","updateTodoMutation"],"sources":["/home/stas/Bootcamp/cgs-team-camp/packages/frontend/src/utils/useUpdateTodo.ts"],"sourcesContent":["import { useMutation, useQueryClient } from 'react-query';\nimport { defaultTodoService } from '../modules/todo/services/todo.service';\nimport { ITodo } from '../modules/todo/types/todo.types';\nimport { QUERY_KEYS } from '../modules/common/consts/app-keys.const';\n\nexport const useUpdateTodo = () => {\n  const queryClient = useQueryClient();\n  const updateTodo = async (todoId: string, data: ITodo): Promise<string> => {\n    await defaultTodoService.updateTodo(todoId, data);\n\n    return todoId;\n  };\n\n  const onSuccess = (todoId: string) => {\n    console.log(todoId, 'success');\n    queryClient.invalidateQueries([QUERY_KEYS.TODOS, [QUERY_KEYS.TODOID, todoId]]);\n  };\n\n  const mutation = useMutation<string, unknown, { todoId: string; data: ITodo }>(\n    (mutationData) => updateTodo(mutationData.todoId, mutationData.data),\n    {\n      onSuccess\n    }\n  );\n\n  return { updateTodoMutation: mutation };\n};\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,aAAa;AACzD,SAASC,kBAAkB,QAAQ,uCAAuC;AAE1E,SAASC,UAAU,QAAQ,yCAAyC;AAEpE,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,WAAW,GAAGL,cAAc,EAAE;EACpC,MAAMM,UAAU,GAAG,MAAAA,CAAOC,MAAc,EAAEC,IAAW,KAAsB;IACzE,MAAMP,kBAAkB,CAACK,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAC;IAEjD,OAAOD,MAAM;EACf,CAAC;EAED,MAAME,SAAS,GAAIF,MAAc,IAAK;IACpCG,OAAO,CAACC,GAAG,CAACJ,MAAM,EAAE,SAAS,CAAC;IAC9BF,WAAW,CAACO,iBAAiB,CAAC,CAACV,UAAU,CAACW,KAAK,EAAE,CAACX,UAAU,CAACY,MAAM,EAAEP,MAAM,CAAC,CAAC,CAAC;EAChF,CAAC;EAED,MAAMQ,QAAQ,GAAGhB,WAAW,CACzBiB,YAAY,IAAKV,UAAU,CAACU,YAAY,CAACT,MAAM,EAAES,YAAY,CAACR,IAAI,CAAC,EACpE;IACEC;EACF,CAAC,CACF;EAED,OAAO;IAAEQ,kBAAkB,EAAEF;EAAS,CAAC;AACzC,CAAC;AAACX,EAAA,CArBWD,aAAa;EAAA,QACJH,cAAc,EAYjBD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}