{"ast":null,"code":"var _jsxFileName = \"/home/stas/Bootcamp/cgs-team-camp/packages/frontend/src/modules/common/components/todo/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport { ToggleButton } from './actions/toggle.styled';\nimport { TodoService } from '../../../../services/TodoService';\n// import { invalidateQuery } from '../../../../utils/invalidateQuery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst todoService = new TodoService();\nexport default function TodoPageContainer() {\n  _s();\n  const location = useLocation();\n  const {\n    todoId\n  } = location.state;\n  const [todo, setTodo] = useState({});\n  const queryClient = useQueryClient();\n  const updateTodo = async updatedTodo => {\n    await todoService.updateTodo(todo.id, updatedTodo);\n  };\n  const fetchTodo = async () => {\n    const {\n      data\n    } = await todoService.getById(todoId);\n    return data;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await fetchTodo();\n      console.log(data.todo);\n      setTodo(data.todo);\n    };\n    fetchData();\n  }, []);\n  const privateToggle = async () => {\n    console.log('private toggle');\n    const updatedTodo = {\n      ...todo\n    };\n    updatedTodo.isPrivate = !updatedTodo.isPrivate;\n    setTodo(updateTodo);\n    await updateTodo(updatedTodo);\n  };\n  const completeToggle = () => console.log('complete toggle');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: todo.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: todo.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: todo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Complete: \", /*#__PURE__*/_jsxDEV(ToggleButton, {\n        isOn: todo.isCompleted,\n        onToggle: completeToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Private: \", /*#__PURE__*/_jsxDEV(ToggleButton, {\n        isOn: todo.isPrivate,\n        onToggle: privateToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TodoPageContainer, \"klPSDiEPlCyOwBI/z/Z1+8NJMDs=\", false, function () {\n  return [useLocation, useQueryClient];\n});\n_c = TodoPageContainer;\nvar _c;\n$RefreshReg$(_c, \"TodoPageContainer\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useQueryClient","ToggleButton","TodoService","jsxDEV","_jsxDEV","Fragment","_Fragment","todoService","TodoPageContainer","_s","location","todoId","state","todo","setTodo","queryClient","updateTodo","updatedTodo","id","fetchTodo","data","getById","fetchData","console","log","privateToggle","isPrivate","completeToggle","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","isOn","isCompleted","onToggle","_c","$RefreshReg$"],"sources":["/home/stas/Bootcamp/cgs-team-camp/packages/frontend/src/modules/common/components/todo/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport { ToggleButton } from './actions/toggle.styled';\nimport { TodoService } from '../../../../services/TodoService';\n// import { invalidateQuery } from '../../../../utils/invalidateQuery';\nimport { QUERY_KEYS } from '../../consts/app-keys.const';\n\nconst todoService = new TodoService();\n\nexport default function TodoPageContainer() {\n  const location = useLocation();\n  const { todoId } = location.state;\n  const [todo, setTodo] = useState<any>({});\n  const queryClient = useQueryClient();\n\n  const updateTodo = async (updatedTodo: any) => {\n    await todoService.updateTodo(todo.id, updatedTodo);\n  };\n\n  const fetchTodo = async () => {\n    const { data } = await todoService.getById(todoId);\n\n    return data;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await fetchTodo();\n      console.log(data.todo);\n      setTodo(data.todo);\n    };\n\n    fetchData();\n  }, []);\n\n  const privateToggle = async () => {\n    console.log('private toggle');\n    const updatedTodo = { ...todo };\n    updatedTodo.isPrivate = !updatedTodo.isPrivate;\n    setTodo(updateTodo);\n    await updateTodo(updatedTodo);\n  };\n  const completeToggle = () => console.log('complete toggle');\n\n  return (\n    <>\n      <h1>{todo.title}</h1>\n      <div>{todo.id}</div>\n      <div>{todo.description}</div>\n      <div>\n        Complete: <ToggleButton isOn={todo.isCompleted} onToggle={completeToggle} />\n      </div>\n      <div>\n        Private: <ToggleButton isOn={todo.isPrivate} onToggle={privateToggle} />\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}